// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  
  // Relations pour les runs
  organizedRuns Run[]           @relation("RunOrganizer")
  participations RunParticipant[]

  @@map("user")
}

model Run {
  id                  String @id @default(cuid())
  title               String
  description         String?
  location            String
  date                DateTime
  distance            String?
  pace                String?
  maxParticipants     Int      @default(10)
  
  // Relations
  organizerId         String
  organizer           User     @relation("RunOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  participants        RunParticipant[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("run")
}

model RunParticipant {
  id        String   @id @default(cuid())
  userId    String
  runId     String
  joinedAt  DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  run       Run      @relation(fields: [runId], references: [id], onDelete: Cascade)
  
  @@unique([userId, runId]) // Un utilisateur ne peut rejoindre un run qu'une seule fois
  @@map("run_participant")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}